#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: StackId-build-push-task
spec:
  resources:
    inputs:
    - name: git-source
      type: git
    - name: docker-image
      type: image
    outputs:
    - name: docker-image
      type: image
    - name: git-source
      type: git
  params:
  - name: docker-imagename
    type: string
    default: ""
  - name: docker-imagetag
    type: string
    default: ""
  steps:
  - name: enforce-stack-policy-pre-build
    securityContext:
      privileged: true
    image: kabanero/kabanero-utils:0.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        /scripts/enforce_stack_policy.sh pre-build
        
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /etc/secret-volume        
  - name: build
    securityContext:
      privileged: true
    image: kabanero/kabanero-utils:0.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        #executing the insecure_registry_setup.sh script if exists, to add internal registry to insecure registry list
        echo "Running the script /scripts/insecure_registry_setup.sh ...."
        /scripts/insecure_registry_setup.sh
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "The script failed(/scripts/insecure_registry_setup.sh)" >&2
           exit $retVal
        fi

        #executing the ca_certs_setup.sh script if exists, to add additional trusted ca certs to /etc/docker/certs.d/<hosname>/ca.crt
        echo "Running the script /scripts/ca_certs_setup.sh ...."
        /scripts/ca_certs_setup.sh
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "The script failed(/scripts/ca_certs_setup.sh)" >&2
           exit $retVal
        fi
 
        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( /scripts/imageurl_imagename_lowercase.sh -u $(inputs.resources.docker-image.url) -n $(inputs.params.docker-imagename) -t $(inputs.params.docker-imagetag) )
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "The script failed(/scripts/imageurl_imagename_lowercase.sh) Reason: $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" >&2
           exit $retVal
        fi
        
        OUTPUTS_STACK_IMAGE_REGISTRY_URL=$( /scripts/stack_registry_url_setup.sh )
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "The script failed(/scripts/stack_registry_url_setup.sh) Reason: $OUTPUTS_STACK_IMAGE_REGISTRY_URL" >&2
           exit $retVal
        fi

        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
        echo "OUTPUTS_STACK_IMAGE_REGISTRY_URL that will be used to pull the stack =$OUTPUTS_STACK_IMAGE_REGISTRY_URL"
        
        cd /workspace/$gitsource
        appsody build -t "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" --buildah --buildah-options "--format=docker" --stack-registry "$STACK_IMAGE_REGISTRY_URL"
        echo "Copying the generated app-deploy.yaml file from input to the output to pass the file to the next task when this task is used in deploy pipeline"
        cp app-deploy.yaml $(outputs.resources.git-source.path)
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: enforce-stack-policy-post-build
    securityContext:
      privileged: true
    image: kabanero/kabanero-utils:0.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        /scripts/enforce_stack_policy.sh post-build
        
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /etc/secret-volume       
  - name: push
    securityContext:
      privileged: true
    image: kabanero/kabanero-utils:0.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |

        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( /scripts/imageurl_imagename_lowercase.sh -u $(inputs.resources.docker-image.url) -n $(inputs.params.docker-imagename) -t $(inputs.params.docker-imagetag) )
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "The script failed(/scripts/imageurl_imagename_lowercase.sh) Reason: $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" >&2
           exit $retVal
        fi
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

        #executing the insecure_registry_setup.sh script if exists, to add internal registry to insecure registry list
        echo "Running the script /scripts/insecure_registry_setup.sh ...."
        /scripts/insecure_registry_setup.sh
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "The script failed(/scripts/insecure_registry_setup.sh)" >&2
           exit $retVal
        fi

        #executing the ca_certs_setup.sh script if exists, to add additional trusted ca certs to /etc/docker/certs.d/<hosname>/ca.crt
        echo "Running the script /scripts/ca_certs_setup.sh ...."
        /scripts/ca_certs_setup.sh
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "The script failed(/scripts/ca_certs_setup.sh)" >&2
           exit $retVal
        fi

        #if /image-signing-config/registry does not exist, a container image signature is not generated.
        REPO=`cat /image-signing-config/registry`
        if [[ -z $REPO ]]
        then
           echo "Signature will not be generated."
           buildah push "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" "docker://$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
        else
           echo "Signature will be generated."
           if [[ $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE != $REPO/* ]]; then
              echo "The specified signed image repository does not match the name of the repository in image-signing-config secret resource. The repository name should start with $REPO, Specified signed image name is $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
              exit 1
           fi
           #importing RSA secret key, then extract an e-mail address from it.
           gpg --import /image-signing-config/secret.asc
           SIGNBY=`gpg --list-keys|sed -n -e "/.*<.*>.*/p"|sed -e "s/^.*<\(.*\)>.*$/\1/"`
           skopeo copy --remove-signatures --sign-by $SIGNBY "containers-storage:$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" "docker://$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
           RESULT=$?
           if [ $RESULT -ne 0 ]; then
              echo "sign-image failed. exit code : $RESULT"
              exit $RESULT
           fi
           if [[ -z `cat /image-signing-config/sigstore` ]]; then
              echo "Signature is stored in the image registry"
           else
              #invoking scripts for processing a generated signature.
              echo "A signature is stored by scripts."
              for f in /sigstore-script/*; do [ -f "$f" ] || break; echo "Processing $f"; $f;  done
           fi
        fi
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /image-signing-config
      name: image-signing-config
    - mountPath: /etc/containers/registries.d
      name: registries-d
    - mountPath: /sigstore-script
      name: sigstore-script

  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: config-volume
    configMap:
      name: stack-image-registry-map
      optional: true
  - name: registries-d
    configMap:
      name: registries-d
      optional: true
  - name: sigstore-script
    configMap:
      name: sigstore-script
      defaultMode: 0555
      optional: true
  - name: secret-volume
    secret:
      secretName: default-stack-image-registry-secret
      optional: true
  - name: image-signing-config
    secret:
      secretName: image-signing-config
      optional: true
