apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-push-promote-task
spec:
  inputs:
    resources:
    - name: git-source
      type: git
    params:
    - name: git-project
      type: string
  outputs:
    resources:
    - name: docker-image
      type: image
    - name: git-source
      type: git
  steps:
  - name: build
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        cd /workspace/$gitsource

        #executing the insecure_registry_setup.sh script if exists, to add internal registry to insecure registry list
        if [ -f "/workspace/$gitsource/insecure_registry_setup.sh" ]; then
           echo "Running the script /workspace/$gitsource/insecure_registry_setup.sh ...."
           /workspace/$gitsource/insecure_registry_setup.sh
        fi

        #executing the ca_certs_setup.sh script if exists, to add additional trusted ca certs to /etc/docker/certs.d/<hosname>/ca.crt
        if [ -f "/workspace/$gitsource/ca_certs_setup.sh" ]; then
           echo "Running the script /workspace/$gitsource/ca_certs_setup.sh ...."
           /workspace/$gitsource/ca_certs_setup.sh
        fi

        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( /workspace/$gitsource/imageurl_imagename_lowercase.sh )
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "The script failed(/workspace/$gitsource/imageurl_imagename_lowercase.sh) Reason: $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" >&2
           exit $retVal
        fi

        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

        appsody build -t "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" --buildah --buildah-options "--format=docker"
        echo "Copying the generated app-deploy.yaml file from input to the output to pass the file to the next task when this task is used in deploy pipeline"
        cp app-deploy.yaml $(outputs.resources.git-source.path)
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: push
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        #executing the insecure_registry_setup.sh script if exists, to add internal registry to insecure registry list
        if [ -f "/workspace/$gitsource/insecure_registry_setup.sh" ]; then
           echo "Running the script /workspace/$gitsource/insecure_registry_setup.sh ...."
           /workspace/$gitsource/insecure_registry_setup.sh
        fi

        #executing the ca_certs_setup.sh script if exists, to add additional trusted ca certs to /etc/docker/certs.d/<hosname>/ca.crt
        if [ -f "/workspace/$gitsource/ca_certs_setup.sh" ]; then
           echo "Running the script /workspace/$gitsource/ca_certs_setup.sh ...."
           /workspace/$gitsource/ca_certs_setup.sh
        fi

        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( /workspace/$gitsource/imageurl_imagename_lowercase.sh)
        retVal=$?
        if [ $retVal -ne 0 ]
        then
           echo "The script failed(/workspace/$gitsource/imageurl_imagename_lowercase.sh) Reason: $OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" >&2
           exit $retVal
        fi

        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
  
        buildah push --tls-verify=false "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" "docker://$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: promote
    securityContext:
      privileged: true
    image: quay.io/redhat-developer/gitops-cli
    command: ["/bin/bash"]
    args:
      - -c
      - |
        echo "Gitops repo url = $GITOPS_REPO_URL"
        echo "Gitops repo commit name = $GITOPS_COMMIT_USER_NAME"
        echo "Gitops repo commit email = $GITOPS_COMMIT_USER_EMAIL"
        echo " "

        if [[ ! -z "$GITOPS_REPO_URL" ]]; then

          if [ -z "$GITHUB_TOKEN" ]; then
            echo "[ERROR] Secret 'gitops-token' with the token to access gitops repo was not configured. Please configure secret and try again."
            exit 1
          fi

          # Move the app-deploy.yaml to the /config folder of the gitops repo
          cd /workspace/$gitsource
          mkdir config
          mv app-deploy.yaml config

          # Generate a kustomize.yaml file under config with list of resources
          cd config 
          KUSTOMIZATION_YAML="kustomization.yaml"
          touch $KUSTOMIZATION_YAML
          echo "---" >> $KUSTOMIZATION_YAML
          echo "resources: " >> $KUSTOMIZATION_YAML

          for asset_name in $(ls)
          do
              if [ $asset_name != $KUSTOMIZATION_YAML ]; then
                echo "  - $asset_name" >> $KUSTOMIZATION_YAML
              fi
          done

          echo "KUSTOMIZATION_YAML = "
          cat $KUSTOMIZATION_YAML
          
          echo " "
          echo "List of files under config directory being promoted - "
          ls

          # Genreate the .gitconfig file used by service promote
          cd $HOME
          GITCONFIG=".gitconfig"
          touch $GITCONFIG

          if [ -z "$GITOPS_COMMIT_USER_NAME" ]; then
            echo "[WARN] gitops-commit-user-name not configured in the gitops-map config map.  Using a default value of kabanero."
            GITOPS_COMMIT_USER_NAME="kabanero"
          fi

          if [ -z "$GITOPS_COMMIT_USER_EMAIL" ]; then
            echo "[WARN] gitops-commit-user-email not configured in the gitops-map config map.  Using a default value of functional-id@kabanero.io."
            GITOPS_COMMIT_USER_EMAIL="functional-id@kabanero.io"
          fi

          echo "[user]" >> $GITCONFIG
          echo "  name = $GITOPS_COMMIT_USER_NAME" >> $GITCONFIG
          echo "  email = $GITOPS_COMMIT_USER_EMAIL" >> $GITCONFIG
          cat $HOME/.gitconfig

          echo " "
          echo "service name = $(inputs.params.git-project)"
          if [[ -z "$(inputs.params.git-project)" ]]; then
            echo "[ERROR] Unable to retrieve service name from input params.  Unable to promote."
            exit 1
          fi

          services promote --from /workspace/$gitsource --to $(GITOPS_REPO_URL) --service $(inputs.params.git-project)  --debug
          if [ $0 != 0 ]; then
            echo "[ERROR] Promote to gitops repo failed.  Please review logs above."
            exit 1
          fi
        else
          echo "[INFO] No gitops repo configured.  service promote not executed."
        fi
    env:
    - name: gitsource
      value: git-source
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: gitops-token
          key: password
          optional: true
    - name: GITOPS_REPO_URL
      valueFrom:
        configMapKeyRef:
         name: gitops-map
         key: gitops-repo-url
         optional: true
    - name: GITOPS_COMMIT_USER_NAME
      valueFrom:
        configMapKeyRef:
         name: gitops-map
         key: gitops-commit-user-name
         optional: true
    - name: GITOPS_COMMIT_USER_EMAIL
      valueFrom:
        configMapKeyRef:
         name: gitops-map
         key: gitops-commit-user-email
         optional: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: gitops-map
      mountPath: /config
  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: gitops-map
    configMap:
      name: gitops-map
      optional: true